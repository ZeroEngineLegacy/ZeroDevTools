struct MathVectorSlerp
{
  [Static][Extension(typeid(Math))][Implements]
  function Slerp(start : Real2, end : Real2, t : Real) : Real2
  {
    var dotVal = Math.Dot(start, end);
    var theta = Math.ACos(dotVal) * t;
    
    var relativeVec = Real2();
    // If end is the negative of start, no direction is better to interpolate than
    // another, so generate a random perpendicular vector to rotate towards
    if(dotVal == -1.0)
      relativeVec = Real2(-start.Y, start.X);
    else
      relativeVec = end - start * dotVal;
    // Attempt normalize (zero vectors and start == end)
    relativeVec = Math.Normalize(relativeVec);
    return (start * Math.Cos(theta)) + (relativeVec * Math.Sin(theta));
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Slerp(start : Real3, end : Real3, t : Real) : Real3
  {
    var normalizedStart = Math.Normalize(start);
    var normalizedEnd = Math.Normalize(end);
    
    var dotVal = Math.Dot(normalizedStart, normalizedEnd);
    // Safeguard for non-normalized and slight floating point errors
    dotVal = Math.Clamp(dotVal, -1.0, 1.0);
    var theta = Math.ACos(dotVal) * t;
    
    var relativeVec = Real3();
    // If end is the negative of start, no direction is better to interpolate than
    // another, so generate a random perpendicular vector to rotate towards
    if(dotVal == -1.0)
    {
      // Unfortunately, a 3d perpendicular vector is not as simple, so try doing the 2d
      // perpendicular with [x,y], but if x is zero then switch to [y,z] instead
      if(normalizedStart.X != 0.0)
        relativeVec = Real3(-normalizedStart.Y, normalizedStart.X, normalizedStart.Z);
      else
        relativeVec = Real3(normalizedStart.X, -normalizedStart.Z, normalizedStart.Y);
    }
    else
      relativeVec = normalizedEnd - normalizedStart * dotVal;
    // Attempt normalize (zero vectors and start == end)
    relativeVec = Math.Normalize(relativeVec);
    return (normalizedStart * Math.Cos(theta)) + (relativeVec * Math.Sin(theta));
  }
}

struct MathSignedAngle
{
  [Static][Extension(typeid(Math))][Implements]
  function SignedAngle(p0 : Real3, p1 : Real3, up : Real3) : Real
  {
    // Get the right vector
    var right = Math.Cross(p0, up);
    right = Math.Normalize(right);
    
    // Get the forward and right dot products
    var forwardDot = Math.Clamp(Math.Dot(p0, p1), -1.0, 1.0);
    var rightDot = Math.Clamp(Math.Dot(right, p1), -1.0, 1.0);
    
    // Get the actual angle from the forward dot product
    var finalAngle = Math.ACos(forwardDot);
    
    // If we're actually on the left side...
    if(rightDot > 0.0)
    {
      // Compute the real final angle given the quadrant it's in (kinda like atan2)
      finalAngle = -finalAngle;
    }
    
    // Return the finally computed angle
    return finalAngle;
  }
}

struct MathAngle2D
{
  [Static][Extension(typeid(Math))][Implements]
  function Angle2D(value : Real3) : Real
  {
    return Math.ATan2(value.Y, value.X);
  }
}


struct MathGenericRotateTowards[VectorType]
{
  [Static]
  function RotateTowards(p0 : VectorType, p1 : VectorType, maxRadians : Real) : VectorType
  {
    var p0Norm = Math.Normalize(p0);
    var p1Norm = Math.Normalize(p1);
    var angleEpsilon = 0.0000001;
    
    var angle = Math.AngleBetween(p0, p1);
    
    if(angle > Math.Pi)
    {
      angle -= 2.0 * Math.Pi;
    }
    
    angle = Math.Abs(angle);
    if(angle > angleEpsilon)
    {
      var t = maxRadians / angle;
      if(t > 1.0)
      {
        t = 1.0;
      }
      return Math.Slerp(p0, p1, t);
    }
    else
    {
      return p1;
    }
  }
}


struct MathMatrixDeterminant
{
  [Static][Extension(typeid(Math))][Implements]
  function Determinant(value : Real2x2) : Real
  {
    return value.M00 * value.M11 - value.M01 * value.M10;
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Determinant(value : Real3x3) : Real
  {
    return (value.M00 * value.M11 * value.M22 + value.M10 * value.M21 * value.M02 + value.M01 * value.M12 * value.M20) 
         - (value.M02 * value.M11 * value.M20 + value.M10 * value.M01 * value.M22 + value.M00 * value.M21 * value.M12);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Determinant(value : Real4x4) : Real
  {
    var det  = value.M03 * value.M12 * value.M21 * value.M30 - value.M02 * value.M13 * value.M21 * value.M30;
    det += value.M01 * value.M13 * value.M22 * value.M30 - value.M03 * value.M11 * value.M22 * value.M30;
    det += value.M02 * value.M11 * value.M23 * value.M30 - value.M01 * value.M12 * value.M23 * value.M30;
    det += value.M02 * value.M13 * value.M20 * value.M31 - value.M03 * value.M12 * value.M20 * value.M31;
    det += value.M03 * value.M10 * value.M22 * value.M31 - value.M00 * value.M13 * value.M22 * value.M31;
    det += value.M00 * value.M12 * value.M23 * value.M31 - value.M02 * value.M10 * value.M23 * value.M31;
    det += value.M03 * value.M11 * value.M20 * value.M32 - value.M01 * value.M13 * value.M20 * value.M32;
    det += value.M00 * value.M13 * value.M21 * value.M32 - value.M03 * value.M10 * value.M21 * value.M32;
    det += value.M01 * value.M10 * value.M23 * value.M32 - value.M00 * value.M11 * value.M23 * value.M32;
    det += value.M01 * value.M12 * value.M20 * value.M33 - value.M02 * value.M11 * value.M20 * value.M33;
    det += value.M02 * value.M10 * value.M21 * value.M33 - value.M00 * value.M12 * value.M21 * value.M33;
    det += value.M00 * value.M11 * value.M22 * value.M33 - value.M01 * value.M10 * value.M22 * value.M33;
    return det;
  }
}
